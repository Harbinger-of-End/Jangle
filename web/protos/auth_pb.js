// source: protos/auth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
    return this || window || global || self || Function('return this')();
}.call(null);

goog.exportSymbol('proto.auth.SigninRequest', null, global);
goog.exportSymbol('proto.auth.SigninResponse', null, global);
goog.exportSymbol('proto.auth.SignupRequest', null, global);
goog.exportSymbol('proto.auth.SignupResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SignupRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.SignupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.auth.SignupRequest.displayName = 'proto.auth.SignupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SignupResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.SignupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.auth.SignupResponse.displayName = 'proto.auth.SignupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SigninRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.SigninRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.auth.SigninRequest.displayName = 'proto.auth.SigninRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SigninResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.SigninResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.auth.SigninResponse.displayName = 'proto.auth.SigninResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.auth.SignupRequest.prototype.toObject = function (
        opt_includeInstance
    ) {
        return proto.auth.SignupRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.auth.SignupRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.auth.SignupRequest.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                username: jspb.Message.getFieldWithDefault(msg, 1, ''),
                email: jspb.Message.getFieldWithDefault(msg, 2, ''),
                password: jspb.Message.getFieldWithDefault(msg, 3, ''),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SignupRequest}
 */
proto.auth.SignupRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.auth.SignupRequest();
    return proto.auth.SignupRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SignupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SignupRequest}
 */
proto.auth.SignupRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassword(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SignupRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.auth.SignupRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SignupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SignupRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getEmail();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getPassword();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};

/**
 * optional string username = 1;
 * @return {string}
 */
proto.auth.SignupRequest.prototype.getUsername = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 1, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SignupRequest} returns this
 */
proto.auth.SignupRequest.prototype.setUsername = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string email = 2;
 * @return {string}
 */
proto.auth.SignupRequest.prototype.getEmail = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 2, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SignupRequest} returns this
 */
proto.auth.SignupRequest.prototype.setEmail = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string password = 3;
 * @return {string}
 */
proto.auth.SignupRequest.prototype.getPassword = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 3, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SignupRequest} returns this
 */
proto.auth.SignupRequest.prototype.setPassword = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.auth.SignupResponse.prototype.toObject = function (
        opt_includeInstance
    ) {
        return proto.auth.SignupResponse.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.auth.SignupResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.auth.SignupResponse.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
                tokenType: jspb.Message.getFieldWithDefault(msg, 2, ''),
                accessToken: jspb.Message.getFieldWithDefault(msg, 3, ''),
                refreshToken: jspb.Message.getFieldWithDefault(msg, 4, ''),
                expiresIn: jspb.Message.getFieldWithDefault(msg, 5, 0),
                scope: jspb.Message.getFieldWithDefault(msg, 6, ''),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SignupResponse}
 */
proto.auth.SignupResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.auth.SignupResponse();
    return proto.auth.SignupResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SignupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SignupResponse}
 */
proto.auth.SignupResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUserId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTokenType(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setAccessToken(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setRefreshToken(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setExpiresIn(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setScope(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SignupResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.auth.SignupResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SignupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SignupResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTokenType();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getAccessToken();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getRefreshToken();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getExpiresIn();
    if (f !== 0) {
        writer.writeInt64(5, f);
    }
    f = message.getScope();
    if (f.length > 0) {
        writer.writeString(6, f);
    }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.auth.SignupResponse.prototype.getUserId = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 1, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SignupResponse} returns this
 */
proto.auth.SignupResponse.prototype.setUserId = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string token_type = 2;
 * @return {string}
 */
proto.auth.SignupResponse.prototype.getTokenType = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 2, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SignupResponse} returns this
 */
proto.auth.SignupResponse.prototype.setTokenType = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string access_token = 3;
 * @return {string}
 */
proto.auth.SignupResponse.prototype.getAccessToken = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 3, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SignupResponse} returns this
 */
proto.auth.SignupResponse.prototype.setAccessToken = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string refresh_token = 4;
 * @return {string}
 */
proto.auth.SignupResponse.prototype.getRefreshToken = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 4, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SignupResponse} returns this
 */
proto.auth.SignupResponse.prototype.setRefreshToken = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int64 expires_in = 5;
 * @return {number}
 */
proto.auth.SignupResponse.prototype.getExpiresIn = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.auth.SignupResponse} returns this
 */
proto.auth.SignupResponse.prototype.setExpiresIn = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string scope = 6;
 * @return {string}
 */
proto.auth.SignupResponse.prototype.getScope = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 6, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SignupResponse} returns this
 */
proto.auth.SignupResponse.prototype.setScope = function (value) {
    return jspb.Message.setProto3StringField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.auth.SigninRequest.prototype.toObject = function (
        opt_includeInstance
    ) {
        return proto.auth.SigninRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.auth.SigninRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.auth.SigninRequest.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                email: jspb.Message.getFieldWithDefault(msg, 1, ''),
                password: jspb.Message.getFieldWithDefault(msg, 2, ''),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SigninRequest}
 */
proto.auth.SigninRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.auth.SigninRequest();
    return proto.auth.SigninRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SigninRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SigninRequest}
 */
proto.auth.SigninRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassword(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SigninRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.auth.SigninRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SigninRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SigninRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEmail();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPassword();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.auth.SigninRequest.prototype.getEmail = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 1, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SigninRequest} returns this
 */
proto.auth.SigninRequest.prototype.setEmail = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.auth.SigninRequest.prototype.getPassword = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 2, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SigninRequest} returns this
 */
proto.auth.SigninRequest.prototype.setPassword = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.auth.SigninResponse.prototype.toObject = function (
        opt_includeInstance
    ) {
        return proto.auth.SigninResponse.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.auth.SigninResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.auth.SigninResponse.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
                tokenType: jspb.Message.getFieldWithDefault(msg, 2, ''),
                accessToken: jspb.Message.getFieldWithDefault(msg, 3, ''),
                refreshToken: jspb.Message.getFieldWithDefault(msg, 4, ''),
                expiresIn: jspb.Message.getFieldWithDefault(msg, 5, 0),
                scope: jspb.Message.getFieldWithDefault(msg, 6, ''),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SigninResponse}
 */
proto.auth.SigninResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.auth.SigninResponse();
    return proto.auth.SigninResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SigninResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SigninResponse}
 */
proto.auth.SigninResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUserId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTokenType(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setAccessToken(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setRefreshToken(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setExpiresIn(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setScope(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SigninResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.auth.SigninResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SigninResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SigninResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTokenType();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getAccessToken();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getRefreshToken();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getExpiresIn();
    if (f !== 0) {
        writer.writeInt64(5, f);
    }
    f = message.getScope();
    if (f.length > 0) {
        writer.writeString(6, f);
    }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.auth.SigninResponse.prototype.getUserId = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 1, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SigninResponse} returns this
 */
proto.auth.SigninResponse.prototype.setUserId = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string token_type = 2;
 * @return {string}
 */
proto.auth.SigninResponse.prototype.getTokenType = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 2, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SigninResponse} returns this
 */
proto.auth.SigninResponse.prototype.setTokenType = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string access_token = 3;
 * @return {string}
 */
proto.auth.SigninResponse.prototype.getAccessToken = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 3, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SigninResponse} returns this
 */
proto.auth.SigninResponse.prototype.setAccessToken = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string refresh_token = 4;
 * @return {string}
 */
proto.auth.SigninResponse.prototype.getRefreshToken = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 4, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SigninResponse} returns this
 */
proto.auth.SigninResponse.prototype.setRefreshToken = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int64 expires_in = 5;
 * @return {number}
 */
proto.auth.SigninResponse.prototype.getExpiresIn = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.auth.SigninResponse} returns this
 */
proto.auth.SigninResponse.prototype.setExpiresIn = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string scope = 6;
 * @return {string}
 */
proto.auth.SigninResponse.prototype.getScope = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 6, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.auth.SigninResponse} returns this
 */
proto.auth.SigninResponse.prototype.setScope = function (value) {
    return jspb.Message.setProto3StringField(this, 6, value);
};

goog.object.extend(exports, proto.auth);
